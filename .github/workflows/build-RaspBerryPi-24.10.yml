name: build-RaspBerryPi-24.10.0

on:
  workflow_dispatch:
    inputs:
      profile:
        type: choice
        description: "请选择路由器型号"
        required: true
        options:
          - rpi
          - rpi-2
          - rpi-3
          - rpi-4
          - rpi-5
        default: rpi-5
      include_docker:
        description: "是否编译 Docker 插件"
        required: true
        default: 'yes'
        type: choice
        options:
          - 'yes'
          - 'no'
      size:
        description: '请输入要编译固件大小 单位(MB)'
        required: true
        default: '2048'
      include_pcie_eth_m2:
        description: "是否支持 PCIe_TO_ETH_M.2_HAT+"
        required: true
        default: 'yes'
        type: choice
        options:
          - 'yes'
          - 'no'

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set executable permissions
        run: |
          chmod +x ${{ github.workspace }}/raspberrypi/24.10/build.sh

      - name: Build raspberrypi ImmortalWrt 24.10.0
        run: |
          profiles="${{ github.event.inputs.profile }}"
          if [ "$profiles" = "rpi" ]; then
            tag=bcm27xx-bcm2708-openwrt-24.10.0
            echo "cpu=bcm2708" >> $GITHUB_ENV
          elif [ "$profiles" = "rpi-2" ]; then
            tag=bcm27xx-bcm2709-openwrt-24.10.0
            echo "cpu=bcm2709" >> $GITHUB_ENV
          elif [ "$profiles" = "rpi-3" ]; then
            tag=bcm27xx-bcm2710-openwrt-24.10.0
            echo "cpu=bcm2710" >> $GITHUB_ENV
          elif [ "$profiles" = "rpi-4" ]; then
            tag=bcm27xx-bcm2711-openwrt-24.10.0
            echo "cpu=bcm2711" >> $GITHUB_ENV
          elif [ "$profiles" = "rpi-5" ]; then
            tag=bcm27xx-bcm2712-openwrt-24.10.0
            echo "cpu=bcm2712" >> $GITHUB_ENV
          fi
          include_docker="${{ github.event.inputs.include_docker }}"
          size="${{ github.event.inputs.size }}"
          include_pcie_eth_m2="${{ github.event.inputs.include_pcie_eth_m2 }}"
          # 创建自定义文件目录并启用 PCIe
          mkdir -p ${{ github.workspace }}/files/boot/firmware
          echo "dtparam=pciex1" > ${{ github.workspace }}/files/boot/firmware/config.txt
          docker run --rm -i \
            --user root \
            -v "${{ github.workspace }}/bin:/home/build/immortalwrt/bin" \
            -v "${{ github.workspace }}/files:/home/build/immortalwrt/files" \
            -v "${{ github.workspace }}/raspberrypi/24.10/build.sh:/home/build/openwrt/build.sh" \
            -e PROFILE=$profiles \
            -e INCLUDE_DOCKER=$include_docker \
            -e ROOTSIZE=$size \
            -e INCLUDE_PCIE_ETH_M2=$include_pcie_eth_m2 \
            immortalwrt/imagebuilder:$tag /bin/bash /home/build/openwrt/build.sh
          ls ${{ github.workspace }}/bin/targets/bcm27xx/${{ env.cpu }}

      - name: Generate Firmware SHA-256
        run: |
          cp ${{ github.workspace }}/bin/targets/bcm27xx/${{ env.cpu }}/*squashfs-factory.img.gz  ${{ github.workspace }}
          for file in *squashfs-factory.img.gz; do
            sha256sum "$file" > "$file.sha256"
            sha256sum -c "$file.sha256"
          done

      - name: Create info
        run: |
          if [ "${{ github.event.inputs.include_docker }}" == "yes" ]; then
            extra_content="### 默认带docker"
            echo -e "\n $extra_content" >> ${{ github.workspace }}/info.md
          else
            echo -e "NO docker" >> ${{ github.workspace }}/info.md
          fi
          if [ "${{ github.event.inputs.include_pcie_eth_m2 }}" == "yes" ]; then
            echo -e "\n### 支持 PCIe_TO_ETH_M.2_HAT+ (Realtek 以太网和 NVMe)" >> ${{ github.workspace }}/info.md
          fi

      - name: Upload ImmortalWrt as release assets
        uses: softprops/action-gh-release@v2.2.1
        with:
          tag_name: Autobuild-raspberrypi
          body_path: ${{ github.workspace }}/info.md
          files: |
            ${{ github.workspace }}/*.img.gz
            ${{ github.workspace }}/*.sha256
          token: ${{ secrets.GITHUB_TOKEN }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
